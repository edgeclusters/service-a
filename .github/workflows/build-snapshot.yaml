name: build snapshot

on:
  push:
    branches:
      - "feature/**"
  workflow_dispatch:

env:
  MAVEN_SETTINGS_SECURITY: "<settingsSecurity><master>${{ secrets.MAVEN_MASTER_PASSWORD }}</master></settingsSecurity>"
  IMAGE_REPOSITORY: academy
  TARGET_PLATFORMS: "linux/amd64,linux/arm64"
  CONTAINER_REGISTRY_ACADEMY_USER: robot-academy-pull-push

jobs:
  maven-build:
    name: Maven build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: "temurin"
          java-version: "17"
          cache: maven

      - name: Get application metadata from pom.xml
        run: |
          export SERVICE_NAME=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)
          export SERVICE_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          export COMMIT_ID_SHORT=$(git rev-parse --short "$GITHUB_SHA")

          echo "SERVICE_NAME=$SERVICE_NAME" >> $GITHUB_ENV
          echo "SERVICE_VERSION=$SERVICE_VERSION" >> $GITHUB_ENV
          echo "COMMIT_ID_SHORT=$COMMIT_ID_SHORT" >> $GITHUB_ENV

          echo "::debug::SERVICE_NAME: $SERVICE_NAME, SERVICE_VERSION: $SERVICE_VERSION, COMMIT_ID_SHORT: $COMMIT_ID_SHORT"

      - name: Build with Maven
        run: |
          mvn package --batch-mode --fail-at-end

      - name: Package Helm chart
        run: |
          helm package \
          --app-version ${{ env.SERVICE_VERSION }} \
          --version ${{ env.SERVICE_VERSION }} \
          helm
          mv ${{ env.SERVICE_NAME }}-${{ env.SERVICE_VERSION }}.tgz chart.tgz

      - name: Upload Helm chart
        uses: actions/upload-artifact@v3
        with:
          name: chart.tgz
          path: chart.tgz
          retention-days: 1

      - name: Upload application JAR
        uses: actions/upload-artifact@v3
        with:
          name: app.jar
          path: target/${{ env.SERVICE_NAME }}-${{ env.SERVICE_VERSION }}.jar
          retention-days: 1

      - name: Publish Test Report
        if: ${{ always() }}
        uses: scacap/action-surefire-report@v1.0.13

  helm-push:
    needs: maven-build
    name: Push Helm chart to Helm registry
    runs-on: ubuntu-latest

    steps:
      - name: Checkout common environment values
        uses: actions/checkout@v2
        with:
          repository: edgeclusters/academy-common
          path: common
          token: ${{ secrets.COMMON_REPO_ACCESS_TOKEN }}

      - name: Merge common environment values
        run: cat common/config.env >> $GITHUB_ENV

      - name: Download Helm chart archive
        uses: actions/download-artifact@v3
        with:
          name: chart.tgz

      - name: Login to registry (push)
        uses: docker/login-action@v1
        with:
          registry: ${{ env.CONTAINER_REGISTRY_HOSTNAME }}
          username: ${{ env.HELM_REGISTRY_USER_PUSH }}
          password: ${{ secrets.HELM_REGISTRY_PASSWORD }}

      - name: Push to registry
        run: helm push chart.tgz oci://${{ env.HELM_REGISTRY_HOSTNAME }}/${{ env.IMAGE_REPOSITORY }}

      # - name: Add helm repository
      #   run: |
      #     helm version
      #     helm repo add \
      #     --username=${{ env.HELM_REGISTRY_USER_PUSH }} \
      #     --password=${{ secrets.HELM_REGISTRY_PASSWORD }} \
      #     ${{ env.HELM_REPO_NAME }} \
      #     ${{ env.HELM_REGISTRY_BASE_URL }}/${{ env.HELM_REPO_NAME }}

      # # - name: Login to registry (push)
      # #   uses: docker/login-action@v1
      # #   with:
      # #     registry: ${{ env.CONTAINER_REGISTRY_HOSTNAME }}
      # #     username: ${{ env.HELM_REGISTRY_USER_PUSH }}
      # #     password: ${{ secrets.HELM_REGISTRY_PASSWORD }}

      # - name: Publish Helm chart
      #   run: |
      #     export HELM_EXPERIMENTAL_OCI=1
      #     helm version
      #     cd app/helm
      #     helm dependency update
      #     helm package --version ${{ env.SERVICE_VERSION }} --app-version ${{ env.SERVICE_VERSION }} .
      #     helm plugin install https://github.com/chartmuseum/helm-push.git
      #     helm cm-push ${{ env.SERVICE_NAME }}-${{ env.SERVICE_VERSION }}.tgz ${{ env.HELM_REPO_NAME }}
      #     # helm push ${{ env.SERVICE_NAME }}-${{ env.SERVICE_VERSION }}.tgz oci://${{ env.HELM_REGISTRY_HOSTNAME }}/chartrepo/${{ env.HELM_REPO_NAME }}

  nexus-upload:
    needs: maven-build
    name: Upload application JAR to Nexus
    runs-on: ubuntu-latest

    steps:
      - name: Checkout common environment values
        uses: actions/checkout@v2
        with:
          repository: edgeclusters/academy-common
          path: common
          token: ${{ secrets.COMMON_REPO_ACCESS_TOKEN }}

      - name: Merge common environment values
        run: cat common/config.env >> $GITHUB_ENV

      - name: Playing with workflow commands
        id: app-jar-file-name
        run: |
          echo "::debug::Setting JAR_FILE output"
          echo "::set-output name=JAR_FILE::app.jar"
          echo "::warning::Remove this step in the future!"

      - name: Download application JAR
        uses: actions/download-artifact@v3
        with:
          name: ${{ steps.app-jar-file-name.outputs.JAR_FILE }}

      - name: Prepare maven settings-security.xml
        run: echo "${{ env.MAVEN_SETTINGS_SECURITY }}" > ~/.m2/settings-security.xml

      - name: Upload to Nexus
        run: |
          mvn deploy:deploy-file \
          -Durl=${{ env.NEXUS_SNAPSHOTS_REPO_URL }} \
          -DrepositoryId=nexus-snapshots \
          -Dfile=${{ steps.app-jar-file-name.outputs.JAR_FILE }} \
          -DgeneratePom=false \
          -DpomFile=app/pom.xml \
          --settings common/maven/settings.xml

  docker-image:
    needs: maven-build
    name: Build and push multiplatform container image
    runs-on:
      ubuntu-latest

    steps:
      - name: Checkout common environment values
        uses: actions/checkout@v2
        with:
          repository: edgeclusters/academy-common
          path: common
          token: ${{ secrets.COMMON_REPO_ACCESS_TOKEN }}

      - name: Merge common environment values
        run: cat common/config.env >> $GITHUB_ENV

      # - run: echo "IMAGE_FQN=$(echo ${{ env.CONTAINER_REGISTRY_HOSTNAME }}/${{ env.IMAGE_REPOSITORY }}/${{ env.SERVICE_NAME }})" >> $GITHUB_ENV

      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v1
      #   with:
      #     image: tonistiigi/binfmt:qemu-v6.1.0
      #     platforms: amd64,arm64

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v1

      # - name: Login to registry (push)
      #   uses: docker/login-action@v1
      #   with:
      #     registry: ${{ env.CONTAINER_REGISTRY_HOSTNAME }}
      #     username: ${{ env.CONTAINER_REGISTRY_ACADEMY_USER }}
      #     password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}

      # - name: Docker meta
      #   id: meta
      #   uses: docker/metadata-action@v3
      #   with:
      #     # list of Docker images to use as base name for tags
      #     images: ${{ env.IMAGE_FQN }}
      #     # generate Docker tags based on the following events/attributes
      #     tags: |
      #       type=schedule
      #       type=ref,event=branch
      #       type=ref,event=pr
      #       type=semver,pattern={{version}}
      #       type=semver,pattern={{major}}.{{minor}}
      #       type=semver,pattern={{major}}
      #       type=sha

      # - name: Build and push
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: app
      #     build-args: BUILD_ALL_CLIS=false
      #     platforms: ${{ env.TARGET_PLATFORMS }}
      #     push: true
      #     tags: |
      #       "${{ env.IMAGE_FQN }}:${{ env.SERVICE_VERSION }}"
      #       "${{ env.IMAGE_FQN }}:latest"
      #     # tags: ${{ steps.meta.outputs.tags }}
      #     labels: ${{ steps.meta.outputs.labels }}
      #     cache-from: type=registry,ref=${{ env.IMAGE_FQN }}:latest
      #     # cache-from: type=registry,ref=${{ env.IMAGE_FQN }}:buildcache
      #     # cache-to: type=registry,ref=${{ env.IMAGE_FQN }}:buildcache,mode=max

