name: build snapshot

on:
  push:
    branches:
      - "feature/**"
  workflow_dispatch:

env:
  MAVEN_SETTINGS_SECURITY: "<settingsSecurity><master>${{ secrets.MAVEN_MASTER_PASSWORD }}</master></settingsSecurity>"
  IMAGE_REPOSITORY: academy
  TARGET_PLATFORMS: "linux/amd64,linux/arm64"
  CONTAINER_REGISTRY_ACADEMY_USER: robot-academy-pull-push

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      ###################################################
      ## load commmon environment
      ###################################################
      - name: Checkout common repo
        uses: actions/checkout@v2
        with:
          repository: edgeclusters/academy-common
          path: common
          token: ${{ secrets.COMMON_REPO_ACCESS_TOKEN }}

      - name: Load common configuration values
        run: cat common/config.env >> $GITHUB_ENV

      - uses: actions/checkout@v2
        with:
          path: app

      - name: Set up JDK 17
        uses: actions/setup-java@v2.5.0
        with:
          java-version: "17"
          distribution: "adopt"
          cache: maven

      - name: Build with Maven
        run: |
          cd app
          mvn package

      - name: Prepare maven settings-security.xml
        run: |
          echo "${{ env.MAVEN_SETTINGS_SECURITY }}" > ~/.m2/settings-security.xml

      - name: Get service name and version
        run: |
          export SERVICE_NAME=$(mvn --file app/pom.xml --quiet -Dexec.executable=echo -Dexec.args='${project.artifactId}' --non-recursive exec:exec)
          export SERVICE_VERSION=$(mvn --file app/pom.xml --quiet -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
          echo "SERVICE_NAME=$SERVICE_NAME" >> $GITHUB_ENV
          echo "SERVICE_VERSION=$SERVICE_VERSION" >> $GITHUB_ENV
          export COMMIT_ID_SHORT=$(git rev-parse --short "$GITHUB_SHA")
          echo "COMMIT_ID_SHORT=$COMMIT_ID_SHORT" >> $GITHUB_ENV

      - name: Upload to Nexus
        run: |
          export APP_JAR=$(ls -1 app/target/${{ env.SERVICE_NAME }}-${{ env.SERVICE_VERSION }}.jar)
          mvn deploy:deploy-file \
          -Durl=${{ env.NEXUS_SNAPSHOTS_REPO_URL }} \
          -DrepositoryId=nexus-snapshots \
          -Dfile=$APP_JAR \
          -DgeneratePom=false \
          -DpomFile=app/pom.xml \
          --settings common/maven/settings.xml

      - run: echo "IMAGE_FQN=$(echo ${{ env.CONTAINER_REGISTRY_HOSTNAME }}/${{ env.IMAGE_REPOSITORY }}/${{ env.SERVICE_NAME }})" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:qemu-v6.1.0
          platforms: amd64,arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to registry (push)
        uses: docker/login-action@v1
        with:
          registry: ${{ env.CONTAINER_REGISTRY_HOSTNAME }}
          username: ${{ env.CONTAINER_REGISTRY_ACADEMY_USER }}
          password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          # list of Docker images to use as base name for tags
          images: ${{ env.IMAGE_FQN }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: app
          build-args: BUILD_ALL_CLIS=false
          platforms: ${{ env.TARGET_PLATFORMS }}
          push: true
          tags: ${{ env.IMAGE_FQN }}:${{ env.SERVICE_VERSION }}
          # tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.IMAGE_FQN }}:latest
          # cache-from: type=registry,ref=${{ env.IMAGE_FQN }}:buildcache
          # cache-to: type=registry,ref=${{ env.IMAGE_FQN }}:buildcache,mode=max
