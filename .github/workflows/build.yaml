name: build-app

on:
  push:
    branches:
      - develop
      - main

  workflow_dispatch:

env:
  MAIN_BRANCH: main
  DEVELOP_BRANCH: develop
  MAVEN_SETTINGS_SECURITY: "<settingsSecurity><master>${{ secrets.MAVEN_MASTER_PASSWORD }}</master></settingsSecurity>"
  IMAGE_REPOSITORY: academy
  HELM_REPO_NAME: academy

jobs:
  common:
    name: Common tasks
    runs-on: ubuntu-latest

    outputs:
      containerRegistryHost: ${{ steps.common.outputs.containerRegistryHost }}
      containerRegistryUser: ${{ steps.common.outputs.containerRegistryUser }}
      helmRegistryBaseUrl: ${{ steps.common.outputs.helmRegistryBaseUrl }}
      helmRegistryHost: ${{ steps.common.outputs.helmRegistryHost }}
      helmRegistryUser: ${{ steps.common.outputs.helmRegistryUser }}
      nexusBaseUrl: ${{ steps.common.outputs.nexusBaseUrl }}
      nexusUser: ${{ steps.common.outputs.nexusUser }}
      nexusSnapshotsRepoUrl: ${{ steps.common.outputs.nexusSnapshotsRepoUrl }}
      nexusReleasesRepoUrl: ${{ steps.common.outputs.nexusReleasesRepoUrl }}
      targetPlatforms: ${{ steps.common.outputs.targetPlatforms }}
      gitUserEmail: ${{ steps.common.outputs.gitUserEmail }}

    steps:
      - uses: edgeclusters/common-tasks@v1
        id: common
        with:
          accessToken: ${{ secrets.ACCESS_TOKEN }}

  maven-build:
    name: Maven build
    needs: common
    runs-on: ubuntu-latest

    outputs:
      appGroupId: ${{ steps.service-metadata.outputs.appGroupId }}
      appArtifactId: ${{ steps.service-metadata.outputs.appArtifactId }}
      appVersion: ${{ steps.service-metadata.outputs.appVersion }}
      appCommitId: ${{ steps.service-metadata.outputs.appCommitId }}
      appReleaseVersion: ${{ steps.release.outputs.appReleaseVersion }}

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: "temurin"
          java-version: "17"
          cache: maven

      - name: Extract branch name
        id: extract_branch
        run: |
          export CURRENT_BRANCH=$(echo ${GITHUB_REF#refs/heads/})
          echo "::set-output name=currentBranch::$CURRENT_BRANCH"

      - name: Get application metadata from pom.xml
        id: service-metadata
        uses: edgeclusters/extract-pom-metadata@v1
        with:
          pomDir: .

      - name: Remove SNAPSHOT, commit, tag and push
        id: release
        if: ${{ steps.extract_branch.outputs.currentBranch == env.MAIN_BRANCH }}
        run: |
          mvn versions:set -DremoveSnapshot
          mvn versions:commit

          export APP_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "::set-output name=appReleaseVersion::$APP_VERSION"

          git config --global user.name "actions"
          git config --global user.email "${{ needs.common.outputs.gitUserEmail }}"
          git add -A
          git commit -m "Release $APP_VERSION"
          git tag $APP_VERSION
          git push --follow-tags

      - name: Build with Maven
        run: mvn package --batch-mode --fail-at-end

      - name: Publish Test Report
        if: ${{ always() }}
        uses: scacap/action-surefire-report@v1.0.13

      - name: Checkout ${{ env.DEVELOP_BRANCH }}
        if: ${{ steps.extract_branch.outputs.currentBranch == env.MAIN_BRANCH }}
        uses: actions/checkout@v2
        with:
          ref: ${{ env.DEVELOP_BRANCH }}
          path: next-snapshot

      - name: Generate next snapshot
        if: ${{ steps.extract_branch.outputs.currentBranch == env.MAIN_BRANCH }}
        run: |
          cd next-snapshot
          mvn versions:set -DnextSnapshot=true
          git config --global user.name "actions"
          git config --global user.email "${{ needs.common.outputs.gitUserEmail }}"
          git add -A
          git commit -m "Next SNAPSHOT"
          git push

      - name: Package Helm chart
        run: |
          export VER=${{ steps.release.outputs.appReleaseVersion }}

          if [ -z $VER ]; then
            export VER=${{ steps.service-metadata.outputs.appVersion }}
          fi

          helm package \
          --app-version $VER \
          --version $VER \
          helm

      # - name: Deploy helm registry ca file
      #   run: |
      #     echo "${{ secrets.HELM_REGISTRY_CA }}" | base64 -d > ca.crt

      - name: Add helm repository
        run: |
          helm repo add \
          --username=${{ needs.common.outputs.helmRegistryUser }} \
          --password=${{ secrets.HELM_REGISTRY_PASSWORD }} \
          --insecure-skip-tls-verify \
          ${{ env.HELM_REPO_NAME }} \
          ${{ needs.common.outputs.helmRegistryBaseUrl }}/chartrepo/${{ env.HELM_REPO_NAME }}


          # cd "${{ env.HELM_CHART_NAME }}"
          #--ca-file ca.crt

      - name: Push the chart
        run: |
          export VER=${{ steps.release.outputs.appReleaseVersion }}

          if [ -z $VER ]; then
            export VER=${{ steps.service-metadata.outputs.appVersion }}
          fi
          
          helm plugin install https://github.com/chartmuseum/helm-push.git
          helm cm-push ${{ steps.service-metadata.outputs.appArtifactId }}-$VER.tgz ${{ env.HELM_REPO_NAME }}

      # FAILS WITH ARGOCD 2.3.2!!!
      # - name: Login to registry (push)
      #   uses: docker/login-action@v1
      #   with:
      #     registry: ${{ needs.common.outputs.containerRegistryHost }}
      #     username: ${{ needs.common.outputs.containerRegistryUser }}
      #     password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}

      # - name: Push Helm chart to registry
      #   run: |
      #     export VER=${{ steps.release.outputs.appReleaseVersion }}

      #     if [ -z $VER ]; then
      #       export VER=${{ steps.service-metadata.outputs.appVersion }}
      #     fi

      #     helm push ${{ steps.service-metadata.outputs.appArtifactId }}-$VER.tgz \
      #     oci://${{ needs.common.outputs.containerRegistryHost }}/${{ env.IMAGE_REPOSITORY }}

      - name: Checkout common environment repository (Maven settings-security.xml)
        uses: actions/checkout@v2
        with:
          repository: edgeclusters/academy-common
          token: ${{ secrets.ACCESS_TOKEN }}
          path: common

      - name: Prepare maven settings-security.xml
        run: |
          mkdir -p ~/.m2
          echo "${{ env.MAVEN_SETTINGS_SECURITY }}" > ~/.m2/settings-security.xml

      - name: Upload to Nexus
        run: |
          if [[ '${{ steps.extract_branch.outputs.currentBranch }}' == '${{ env.DEVELOP_BRANCH }}' ]]; then
            export SETTINGS_REPOSITORY_ID=nexus-snapshots
            export NEXUS_URL=${{ needs.common.outputs.nexusSnapshotsRepoUrl }}
          else
            export SETTINGS_REPOSITORY_ID=nexus-releases
            export NEXUS_URL=${{ needs.common.outputs.nexusReleasesRepoUrl }}
          fi

          export VER=${{ steps.release.outputs.appReleaseVersion }}

          if [ -z $VER ]; then
            export VER=${{ steps.service-metadata.outputs.appVersion }}
          fi          

          mvn deploy:deploy-file \
          -Durl=$NEXUS_URL \
          -DrepositoryId=$SETTINGS_REPOSITORY_ID \
          -Dfile=target/${{ steps.service-metadata.outputs.appArtifactId }}-$VER.jar \
          -DgeneratePom=false \
          -DpomFile=pom.xml \
          --settings common/maven/settings.xml

  docker-image:
    needs: [common, maven-build]
    name: Build and push multiplatform container image
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Download application JAR form Nexus
        run: |
          if [[ '${{ steps.extract_branch.outputs.currentBranch }}' == '${{ env.DEVELOP_BRANCH }}' ]]; then
            export NEXUS_REPOSITORY_ID=maven-snapshots
            export VER=${{ needs.maven-build.outputs.appReleaseVersion }}
          else
            export NEXUS_REPOSITORY_ID=maven-releases
            export VER=${{ needs.maven-build.outputs.appReleaseVersion }}
          fi

          mkdir -p target
          curl -L -X GET \
          -u ${{ needs.common.outputs.nexusUser }}:${{ secrets.NEXUS_PASSWORD }} \
          -G "${{ needs.common.outputs.nexusBaseUrl }}/service/rest/v1/search/assets/download" \
          -d sort=version \
          -d direction=desc \
          -d maven.extension=jar \
          -d maven.classifier= \
          -d repository=$NEXUS_REPOSITORY_ID \
          -d maven.groupId=${{ needs.maven-build.outputs.appGroupId }} \
          -d maven.artifactId=${{ needs.maven-build.outputs.appArtifactId }} \
          -d maven.baseVersion=$VER \
          --output target/app.jar

      - name: Prepare helper variables
        id: image
        run: |
          export IMAGE_FQN=$(echo ${{ needs.common.outputs.containerRegistryHost }}/${{ env.IMAGE_REPOSITORY }}/${{ needs.maven-build.outputs.appArtifactId }})
          echo "::set-output name=imageFqn::$IMAGE_FQN"
          export PLATFORMS_TEMP=${{ needs.common.outputs.targetPlatforms }}
          echo "::set-output name=targetArchitectures::$(echo ${PLATFORMS_TEMP//linux\//})"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:qemu-v6.2.0
          platforms: ${{ steps.image.outputs.targetArchitectures }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to registry (push)
        uses: docker/login-action@v1
        with:
          registry: ${{ needs.common.outputs.containerRegistryHost }}
          username: ${{ needs.common.outputs.containerRegistryUser }}
          password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ steps.image.outputs.imageFqn }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Set APP_VERSION
        run: |
          if [[ '${{ needs.maven-build.outputs.appReleaseVersion }}' != '' ]]; then
            export APP_VERSION=${{ needs.maven-build.outputs.appReleaseVersion }}
          else
            export APP_VERSION=${{ needs.maven-build.outputs.appVersion }}
          fi

          # echo "::set-output name=APP_VERSION::$APP_VERSION"
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args: |
            BUILD_ALL_CLIS=false
            JAR_FILE=target/app.jar
          platforms: ${{ needs.common.outputs.targetPlatforms }}
          push: true
          tags: |
            "${{ steps.image.outputs.imageFqn }}:${{ env.APP_VERSION }}"
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ steps.image.outputs.imageFqn }}:latest
